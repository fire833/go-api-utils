/*
*	Copyright (C) 2025 Kendall Tauser
*
*	This program is free software; you can redistribute it and/or modify
*	it under the terms of the GNU General Public License as published by
*	the Free Software Foundation; either version 2 of the License, or
*	(at your option) any later version.
*
*	This program is distributed in the hope that it will be useful,
*	but WITHOUT ANY WARRANTY; without even the implied warranty of
*	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*	GNU General Public License for more details.
*
*	You should have received a copy of the GNU General Public License along
*	with this program; if not, write to the Free Software Foundation, Inc.,
*	51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

package rest

import "go/types"

type Operator uint8

// QueryParams are an interface that is supplied by ObjectManagers, and consumed by
// Query generation mechanisms, such as SQL query generator or ElasticSearch query generator.
// Such queries can then be passed to the correspoding client libraries, which then will execute
// the corresponding queries and return data/errors on the transaction.
type GenericQueryParams struct {
	// All fields that should be included with this query are here. This is usually going to correspond
	// to all of the fields within an Object, but can be useful if you want to limit the fields that are insertable/updatable.
	// For example, you want to be able to retrieve data by primary key, but that row is autogenerated in SQL.
	// You can, through genapi and static codegenning, allow all rows to be used for SELECT queries to SQL,
	// but limit insert/update rows to all but the primary key row.
	Fields []*Field

	// QueryPredicates includes all predicates that can be appended to queries with these params. Depending on
	// the query generator, the generator will include the predicate in the query
	Predicates []*QueryPredicate
}

const (
	// field = operand
	Equal Operator = iota
	// field < operand
	LessThan
	// field > operation
	GreaterThan
	// field <= operand
	LessThanEq
	// field >= operand
	GreaterThanEq
	// field range operand-operand
	Between
)

// A Field describes an element of a Object type. This is a single element that will normally
// correspond to a single row in SQL, or a single field in Elasticsearch.
type Field struct {
	// Name is the name of this field. This can correspond to column name is SQL, or a
	// field name in elastic, etc.
	Name string

	// Specify the type of this field. This will be a basic type, and should generally
	// be restricted to strings, numbers (u/ints or floats), or booleans.
	Type types.BasicKind
}

type QueryPredicate struct {
	Operation Operator

	// Reference to the field within the type that this operand will be compared with.
	FieldRef *Field

	OperandType types.BasicKind

	// Specify the operand of this predicate. For any type, whether it be a datetime,
	// string, number, boolean, etc. The value should be converted to a corresponding string
	// value. This conversion will need to be done once by your preprocessor/genapi, but will usually
	// need to be cast again for whichever backend is consuming the parent generic query.
	Operand string
}
